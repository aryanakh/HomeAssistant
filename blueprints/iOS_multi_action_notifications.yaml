blueprint:
  name: iOS Multi-Action Notification (v0.3)
  author: AryaNakh
  domain: script
  homeassistant:
    min_version: 2024.11.0
  description: |
    # 📲 iOS Multi-Action Notification (v0.3)

    Send **actionable notifications** to **one or many iOS devices** with up to **4 customizable buttons**.  
    Designed for iOS (Android devices will still get notifications but ignore iOS-specific features).

    ## Features
    -  Send to **multiple iOS devices** at once  
    -  **2–4 custom buttons** with:
      -  Custom text
      -  SF Symbols icon (e.g., `sfsymbols:lock.shield.fill`)
      -  Destructive (red highlight)
      -  `authenticationRequired` (Face ID / Touch ID / Passcode)
      -  `foreground` (open Home Assistant app when tapped)
    -  Optional **critical notification** (bypasses Silent/DND on iOS, with custom sound + volume)

    ##  SF Symbols
    Use Apple’s SF Symbols catalog to find icon names: https://developer.apple.com/sf-symbols/

    ## ⚠️ Notes
    - iOS only: advanced options (icons, destructive, auth, foreground, critical).  
    - Critical notifications require **Critical Alerts permission** in iOS settings for the HA app.
    - Android devices → receive the message and basic buttons, but ignore special iOS flags.

    ## Android Disclaimer
    I designed this specifically for my own iOS needs. Please dont ask for Android changes!

  input:
    notify_targets:
      name: Devices to notify (one or many)
      selector:
        target:
          device:
            integration: mobile_app

    title:
      name: Title
      default: ""
      selector: { text: {} }

    message:
      name: Message
      selector: { text: {} }

    # ---- Critical notification (optional)
    critical_enable:
      name: Critical notification
      description: Enable to bypass Silent/DND on iOS (requires iOS Critical Alerts permission).
      default: false
      selector: { boolean: {} }
    critical_sound:
      name: Critical sound name
      description: Use "default" or a bundled sound name.
      default: default
      selector: { text: {} }
    critical_volume:
      name: Critical volume (0.0–1.0)
      default: 1.0
      selector:
        number:
          min: 0
          max: 1
          step: 0.1
          mode: slider

    # ---- Action 1 (required)
    action_1_text:
      name: Action 1 - Text
      default: Confirm
      selector: { text: {} }
    action_1_icon:
      name: Action 1 - Icon (SF Symbols)
      description: "Example: sfsymbols:checkmark.circle.fill"
      default: ""
      selector: { text: {} }
    action_1_destructive:
      name: Action 1 - Destructive (iOS)
      description: Colors the button red on iOS (visual only; action still runs).
      default: false
      selector: { boolean: {} }
    action_1_auth:
      name: Action 1 - authenticationRequired
      description: Require Face/Touch ID or passcode before running.
      default: false
      selector: { boolean: {} }
    action_1_foreground:
      name: Action 1 - foreground (open app)
      default: false
      selector: { boolean: {} }
    action_1_sequence:
      name: Action 1 - Sequence
      default: []
      selector: { action: {} }

    # ---- Action 2 (required)
    action_2_text:
      name: Action 2 - Text
      default: Deny
      selector: { text: {} }
    action_2_icon:
      name: Action 2 - Icon (SF Symbols)
      description: "Example: sfsymbols:xmark.circle.fill"
      default: ""
      selector: { text: {} }
    action_2_destructive:
      name: Action 2 - Destructive (iOS)
      description: Colors the button red on iOS (visual only; action still runs).
      default: false
      selector: { boolean: {} }
    action_2_auth:
      name: Action 2 - authenticationRequired
      default: false
      selector: { boolean: {} }
    action_2_foreground:
      name: Action 2 - foreground (open app)
      default: false
      selector: { boolean: {} }
    action_2_sequence:
      name: Action 2 - Sequence
      default: []
      selector: { action: {} }

    # ---- Action 3 (optional)
    enable_action_3:
      name: Enable Action 3
      default: false
      selector: { boolean: {} }
    action_3_text:
      name: Action 3 - Text
      default: ""
      selector: { text: {} }
    action_3_icon:
      name: Action 3 - Icon (SF Symbols)
      default: ""
      selector: { text: {} }
    action_3_destructive:
      name: Action 3 - Destructive (iOS)
      description: Colors the button red on iOS (visual only; action still runs).
      default: false
      selector: { boolean: {} }
    action_3_auth:
      name: Action 3 - authenticationRequired
      default: false
      selector: { boolean: {} }
    action_3_foreground:
      name: Action 3 - foreground (open app)
      default: false
      selector: { boolean: {} }
    action_3_sequence:
      name: Action 3 - Sequence
      default: []
      selector: { action: {} }

    # ---- Action 4 (optional)
    enable_action_4:
      name: Enable Action 4
      default: false
      selector: { boolean: {} }
    action_4_text:
      name: Action 4 - Text
      default: ""
      selector: { text: {} }
    action_4_icon:
      name: Action 4 - Icon (SF Symbols)
      default: ""
      selector: { text: {} }
    action_4_destructive:
      name: Action 4 - Destructive (iOS)
      description: Colors the button red on iOS (visual only; action still runs).
      default: false
      selector: { boolean: {} }
    action_4_auth:
      name: Action 4 - authenticationRequired
      default: false
      selector: { boolean: {} }
    action_4_foreground:
      name: Action 4 - foreground (open app)
      default: false
      selector: { boolean: {} }
    action_4_sequence:
      name: Action 4 - Sequence
      default: []
      selector: { action: {} }

mode: restart

sequence:
  - alias: Build action IDs and inputs
    variables:
      # IDs (unique per run)
      action_1_id: "ACT1_{{ context.id }}"
      action_2_id: "ACT2_{{ context.id }}"
      action_3_id: "ACT3_{{ context.id }}"
      action_4_id: "ACT4_{{ context.id }}"

      # Targets → list of device_ids
      targets: !input notify_targets
      device_ids: >
        {{ targets.device_id if targets is mapping and 'device_id' in targets else [] }}

      # Inputs to vars
      use_a3: !input enable_action_3
      use_a4: !input enable_action_4

      a1: { title: !input action_1_text, icon: !input action_1_icon, destructive: !input action_1_destructive, authenticationRequired: !input action_1_auth, foreground: !input action_1_foreground }
      a2: { title: !input action_2_text, icon: !input action_2_icon, destructive: !input action_2_destructive, authenticationRequired: !input action_2_auth, foreground: !input action_2_foreground }
      a3: { title: !input action_3_text, icon: !input action_3_icon, destructive: !input action_3_destructive, authenticationRequired: !input action_3_auth, foreground: !input action_3_foreground }
      a4: { title: !input action_4_text, icon: !input action_4_icon, destructive: !input action_4_destructive, authenticationRequired: !input action_4_auth, foreground: !input action_4_foreground }

      # Build iOS actions array
      ios_actions: >
        {% set out = [
          dict(a1, **{'action': action_1_id}),
          dict(a2, **{'action': action_2_id})
        ] %}
        {% if use_a3 %}
          {% set _ = out.append(dict(a3, **{'action': action_3_id})) %}
        {% endif %}
        {% if use_a4 %}
          {% set _ = out.append(dict(a4, **{'action': action_4_id})) %}
        {% endif %}
        {{ out }}

      # Critical payload pieces
      crit_enable: !input critical_enable
      crit_sound: !input critical_sound
      crit_volume: !input critical_volume

      # Dict with push.sound only if critical is enabled; else empty dict
      critical_push: >
        {% if crit_enable %}
        {{ {'push': {'sound': {'name': crit_sound, 'critical': 1, 'volume': crit_volume}}} }}
        {% else %}
        {}
        {% endif %}

      # Base data dict always present
      base_data: >
        {{ {'actions': ios_actions} }}

      # Final data = base_data combined with optional critical_push
      final_data: >
        {{ base_data | combine(critical_push) }}

  - alias: Send to each selected device
    repeat:
      for_each: "{{ device_ids }}"
      sequence:
        - domain: mobile_app
          type: notify
          device_id: "{{ repeat.item }}"
          title: !input title
          message: !input message
          data: "{{ final_data }}"

  - alias: Wait for a button press (from any device)
    wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data: { action: "{{ action_1_id }}" }
      - platform: event
        event_type: mobile_app_notification_action
        event_data: { action: "{{ action_2_id }}" }
      - platform: event
        event_type: mobile_app_notification_action
        event_data: { action: "{{ action_3_id }}" }
      - platform: event
        event_type: mobile_app_notification_action
        event_data: { action: "{{ action_4_id }}" }

  - alias: Route to the selected sequence
    choose:
      - conditions: "{{ wait.trigger.event.data.action == action_1_id }}"
        sequence: !input action_1_sequence
      - conditions: "{{ wait.trigger.event.data.action == action_2_id }}"
        sequence: !input action_2_sequence
      - conditions: "{{ use_a3 and wait.trigger.event.data.action == action_3_id }}"
        sequence: !input action_3_sequence
      - conditions: "{{ use_a4 and wait.trigger.event.data.action == action_4_id }}"
        sequence: !input action_4_sequence
